definitions:
  dto.CreateSubjectDto:
    properties:
      name:
        type: string
    type: object
  dto.UpdateSubjectDto:
    properties:
      name:
        type: string
      status:
        type: boolean
    type: object
  entity.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      subject_id:
        type: integer
    type: object
  entity.ErrorResponse:
    properties:
      message:
        description: StatusCode int    `json:"status_code"`
        type: string
    type: object
  entity.Subject:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        type: boolean
      updated_at:
        type: string
      user:
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
  entity.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      status:
        type: boolean
      subject_id:
        type: integer
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      day:
        type: integer
      email:
        type: string
      id:
        type: integer
      month:
        type: integer
      name:
        type: string
      status:
        type: boolean
      subject_id:
        type: integer
      updated_at:
        type: string
      year:
        type: integer
    type: object
  entity.UserListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/entity.UserResponse'
        type: array
      meta:
        properties:
          limit:
            type: integer
          page:
            type: integer
          total:
            type: integer
          totalPages:
            type: integer
        type: object
    type: object
  entity.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        type: boolean
      subject_id:
        type: integer
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/subjects:
    get:
      consumes:
      - application/json
      description: Get a list of all subjects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Subject'
            type: array
      summary: Get all subjects
      tags:
      - subjects
    post:
      consumes:
      - application/json
      description: Create a new subject
      parameters:
      - description: Subject data
        in: body
        name: subject
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSubjectDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Subject'
      summary: Create a subject
      tags:
      - subjects
  /api/v1/subjects/{id}:
    get:
      consumes:
      - application/json
      description: Get a single subject by ID
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Subject'
      summary: Get subject by ID
      tags:
      - subjects
  /api/v1/subjects/clear-cache:
    delete:
      consumes:
      - application/json
      description: Clear the cache of subjects
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Clear cache of subjects
      tags:
      - subjects
  /api/v1/subjects/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a subject by ID
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a subject
      tags:
      - subjects
  /api/v1/subjects/update/{id}:
    put:
      consumes:
      - application/json
      description: Update subject details
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated subject data
        in: body
        name: subject
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSubjectDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Subject'
      summary: Update a subject
      tags:
      - subjects
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get list of all users
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Results per page (default: 10)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Filter by user name (partial match)
        in: query
        name: name
        type: string
      - description: 'Filter by start date (format: YYYY-MM-DD)'
        in: query
        name: startDate
        type: string
      - description: 'Filter by end date (format: YYYY-MM-DD)'
        in: query
        name: endDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Create a user
      tags:
      - users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Get a single user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
  /api/v1/users/clear-cache:
    delete:
      consumes:
      - application/json
      description: Clear the cache of users
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Clear cache of users
      tags:
      - users
  /api/v1/users/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Delete a user
      tags:
      - users
  /api/v1/users/update/{id}:
    put:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.ErrorResponse'
      summary: Update a user
      tags:
      - users
swagger: "2.0"
